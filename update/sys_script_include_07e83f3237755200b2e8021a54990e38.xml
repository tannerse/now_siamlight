<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_siam_light.SIAMAccess</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Controlls Access to SIAM Tables</description>
        <name>SIAMAccess</name>
        <script><![CDATA[var SIAMAccess = Class.create();
SIAMAccess.prototype = {
	initialize: function() {
	},
	
	/* used in a before query BR to restrict access to active target systems only
 	*/
	readQuery: function(query /* GlideRecord */) {
		var gr_target_user = new GlideRecord('x_snc_siam_light_m2m_users_targets');
		gr_target_user.addQuery('user', gs.getUserID());
		var grQueue = gr_target_user.addJoinQuery('x_snc_siam_light_target', 'target', 'sys_id');
		grQueue.addCondition('active', 'true');
		gr_target_user.query();
		
		var has_access = false;
		while (gr_target_user.next()) {
			has_access = true;
			query.addQuery('target', gr_target_user.target);
		}
		
		// fallback, if no target specified restrict to empty target, should aboid access
		if (!has_access) {
			query.addQuery('target', 'ISEMPTY');
		}
		
	},
	
	writeAccess: function(query /* GlideRecord */) {
		return this._isUserAuthorized(gs.getUserID(), query.target);
		
	},
	
	checkAndAddUserRole: function (user /* sys_id */) {
		
		var gr_user_role = new GlideRecord('sys_user_has_role');
		gr_user_role.addQuery('user', user);
		gr_user_role.addQuery('role', this._getRoleID());
		gr_user_role.setLimit(1);
		gr_user_role.query();
		
		if (!gr_user_role.next()) {
			gr_user_role.initialize();
			gr_user_role.user = user;
			gr_user_role.role = this._getRoleID();
			gr_user_role.insert();
			
			gs.addInfoMessage(gs.getMessage('Adding Role {0} to {1}', ['x_snc_siam_light.user', gr_user_role.user.getRefRecord().getDisplayValue()]));
		}
	},
	
	checkAndRemoveUserRole: function (user /* sys_id */) {
		if (!this._isUserAuthorized(user, null)) {
			var gr_user = new GlideRecord('sys_user');
			gr_user.get(user);
			gs.addInfoMessage(gs.getMessage('Remeber to remove role {0} from {1}', ['x_snc_siam_light.user', gr_user.getDisplayValue()]));
		}
		
		
	},
	
	_isUserAuthorized: function (user /* sys_id */, target /* sys_id */) {
		var gr_target_user = new GlideRecord('x_snc_siam_light_m2m_users_targets');
		gr_target_user.addQuery('user', gs.getUserID());
		if (SIAMUtil.notNil(target)) {
			gr_target_user.addQuery('target', target);
		}
		var grQueue = gr_target_user.addJoinQuery('x_snc_siam_light_target', 'target', 'sys_id');
		grQueue.addCondition('active', 'true');
		gr_target_user.setLimit(1);
		gr_target_user.query();
		
		return gr_target_user.next();
	},
	
	_getRoleID: function() {
		if (this.ROLE_ID == undefined) {
			var gr_roles = new GlideRecord('sys_user_role');
			gr_roles.get('name', 'x_snc_siam_light.user');
			this.ROLE_ID = gr_roles.getValue('sys_id');
		}
		return this.ROLE_ID;
	},
	
	type: 'SIAMAccess'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-02-29 20:48:00</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>07e83f3237755200b2e8021a54990e38</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>SIAMAccess</sys_name>
        <sys_package display_value="SIAM Light" source="x_snc_siam_light">add64881295f42002e68eb689ad1b2ab</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="SIAM Light">add64881295f42002e68eb689ad1b2ab</sys_scope>
        <sys_update_name>sys_script_include_07e83f3237755200b2e8021a54990e38</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2016-02-29 22:08:42</sys_updated_on>
    </sys_script_include>
</record_update>
