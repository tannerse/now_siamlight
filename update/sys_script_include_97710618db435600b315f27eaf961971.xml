<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_siam_light.SIAMExtID</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Functions to map external to internal IDs</description>
        <name>SIAMExtID</name>
        <script><![CDATA[var SIAMExtID = Class.create();
SIAMExtID.prototype = {
	
	EXT_ID_TABLE: 'x_snc_siam_light_external_id',
	
	table: '',
	int_id: '',
	target: '',
	ext_id: '',
	
	
	
	/* initializes the ExtId object with a glideRecord of the record in question
 	* and the target system (provider) */
	initialize: function(internal_record, target_sys_id, external_id) {
		var gr_ext_id = new GlideRecord(this.EXT_ID_TABLE);
		
		if (target_sys_id) {
			this.target = target_sys_id;
		}
		
		if (internal_record) {
			this.table = internal_record.getRecordClassName();
			this.int_id = internal_record.sys_id;
			
			gr_ext_id.addQuery('table', this.table);
			gr_ext_id.addQuery('internal_id', this.int_id);
			gr_ext_id.addQuery('target', this.target);
			
			gr_ext_id.query();
			if (gr_ext_id.next()) {
				this.ext_id = gr_ext_id.getValue('external_id');
			}
		}
		
		if (external_id) {
			gr_ext_id.addQuery('target', this.target);
			gr_ext_id.addQuery('external_id', external_id);
			
			gr_ext_id.query();
			if (gr_ext_id.next()) {
				this.int_id = gr_ext_id.getValue('internal_id');
				this.table = gr_ext_id.getValue('table');
				
				// check if records exists
				var gr_int = new GlideRecord(this.table);
				if (!gr_int.get(this.int_id)) {
					gr_ext_id.deleteRecord();
					this.table = '';
					this.int_id = '';
				}
			}
		}
	},
	
	
	
	
	/* returns external id if any, empty string if not
 	*/
	getExternalId: function() {
		return this.ext_id;
	},
	
	/* returns the interl record if any, null if not */
	getInternalRecord: function() {
		if (this.table && this.int_id) {
			var grRecord = new GlideRecord(this.table);
			if (grRecord.get(this.int_id))
				return grRecord;
		}
		return null;
		
	},
	
	/* stores new external id
	@returns true if new external id was stored */
	registerExternalId: function (external_id) {
		
		this.ext_id = external_id;
		
		if (this.ext_id != '') {
			// check if already existing
			var gr_ext_id = new GlideRecord(this.EXT_ID_TABLE);
			gr_ext_id.addQuery('external_id', this.ext_id);
			gr_ext_id.addQuery('target', this.target);
			gr_ext_id.query();
			
			if (!gr_ext_id.next()) {
				gr_ext_id.initialize();
				gr_ext_id.internal_id = this.int_id;
				gr_ext_id.table = this.table;
				gr_ext_id.target = this.target;
				gr_ext_id.external_id = this.ext_id;
			}
			return gr_ext_id.insert();
		} else {
			return false;
		}
	},
	
	type: 'SIAMExtID'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>daniel.draes</sys_created_by>
        <sys_created_on>2016-04-23 21:06:48</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>97710618db435600b315f27eaf961971</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>SIAMExtID</sys_name>
        <sys_package display_value="SIAM Light" source="x_snc_siam_light">add64881295f42002e68eb689ad1b2ab</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="SIAM Light">add64881295f42002e68eb689ad1b2ab</sys_scope>
        <sys_update_name>sys_script_include_97710618db435600b315f27eaf961971</sys_update_name>
        <sys_updated_by>daniel.draes</sys_updated_by>
        <sys_updated_on>2017-08-22 08:46:45</sys_updated_on>
    </sys_script_include>
</record_update>
